/*****************************************************************************
 * GIOP Promela Model -- Scaled down version: removed transport processes
 *
 *
 * vim:tabstop=4 noexpandtab:
 * $Id: giop1.pr,v 1.1 1999/07/03 03:43:40 m2kamel Exp m2kamel $
 *
 * TODO:
 *
 * Copyright (C) 1998 by Moataz Kamel. All rights reserved.
 *****************************************************************************/

      #define __instances_User 2
      #define __instances_GIOPClient 1
      #define __instances_Server 2
      #define __instances_GIOPAgent 2

#define CHANLEN			5	/* default channel length (5) */
#define MAXREQID 		4	/* maximum number for request_id (4) */
#define NUMOBJS			2	/* number of objects (2) */
#define NUMPORTS 		3 	/* number of ports = no. of transport procs */
#define MAXMIGRATIONS	2	/* maximum number of times server can migrate */
#define MAXCONNID		8	/* maximum number of connections */

#define FALSE	0
#define TRUE	1

#define FREE		0	/* indicates a resource is unused */
#define INUSE		1	/* indicates a resource is being used */
#define CANCELLED	2	/* indicates a request has been cancelled */

#define INVALID	255		/* set invalid data as garbage (i.e 255) */


typedef ObjRef {
	byte objKey;
	byte port;
}

/* Define the table of published IORs for all ORBS
 * This is essentially the Name Server, it should be
 * managed by a dedicated process but for now, it is 
 * shared.
 * The table is indexed by objKey and contains the port 
 * of the ORB where the object was most recently registered.
 */
byte gPublished[NUMOBJS] = INVALID; /* Note: this inits all array values */

/* Message types */
mtype = { 

	/* GIOP message types */
	Request, 
	Reply, 
	CancelRequest, 
	CloseConnection, 

	/* User message types */
	URequest,
	UReply,

	/* Server message types */
	SRegister,
	SRequest,
	SReply,
	SMigrateReq,
};


/* The MsgHeader structure aggregates all the fields from all types of 
   GIOP message headers 
*/
typedef MsgHeader {
	byte request_id;	/* Request, Reply, CancelRequest, */
	byte object_key;		/* Request, LocateRequest, */
	byte reply_status;		/* Reply */
	byte forward_port;		/* Reply -- LOCATION_FORWARD address */
}

typedef GIOPMsg {
	MsgHeader mhdr;
}

/* reply_status return codes */
#define NO_EXCEPTION		1
#define USER_EXCEPTION		2
#define SYSTEM_EXCEPTION 	3
#define LOCATION_FORWARD	4
#define OBJECT_NOT_EXIST	5

/* locate_status return codes */
#define UNKNOWN_OBJECT 		1
#define OBJECT_HERE 		2
#define OBJECT_FORWARD 		3

#define AGENT_CLOSED 		0
#define AGENT_CONNECTED 	1


/*--------------------------------------------------------------------------*/
chan toUser = [CHANLEN] of {mtype, byte /*tag*/, byte /*status*/};

chan toClientL = [CHANLEN] of 
	{mtype, byte /* connId */, byte /*srcPort*/, GIOPMsg};
chan toClientU = [CHANLEN] of {mtype, byte /*tag*/, ObjRef};

chan toServer[NUMPORTS] = [CHANLEN] of 
	{mtype, byte /*objkey*/, byte /*opaqueData*/ };

chan toAgentU[NUMPORTS] = [0] of 
	{mtype, byte /*objKey*/, byte /* opaqueData */ };
chan toAgentL[NUMPORTS] = [CHANLEN] of {mtype, byte /* connId */, GIOPMsg};

/*--------------------------------------------------------------------------*/

proctype User(chan lin, lout)
{
	byte tag = _pid;	/* use our pid as a tag value */
	byte status;
	ObjRef objref;

	/* Get a valid object reference from the published table and 
	 * use it to make a request. Note: non-deterministic selection 
	 * is used to choose the object. Also, the numbers are hardcoded, so
	 * if NUMOBJS changes this code will have to change.
	 */
	gPublished[0] != INVALID;
	gPublished[1] != INVALID;	/* wait until both are initialized */

	atomic{
	if
	:: (1) ->
		objref.objKey = 0;
		objref.port = gPublished[0];
	:: (1) ->
		objref.objKey = 1;
		objref.port = gPublished[1];
	fi;
	}

	/* send a user request on the object */
	lout!URequest(tag,objref);

URequestSent:


	/* Wait for a reply and only receive it if it has the same tag 
	 * (i.e. originated from this instance of the user) */
	lin?UReply(eval(tag), status);

progress:
UReplyReceived:
	skip;


}


/*--------------------------------------------------------------------------*/

proctype GIOPClient(chan uin, uout, lin )
{
	byte usedReqId[MAXREQID] = FREE;	/* keeps track of request_ids in-use */
	byte tags[MAXREQID] = INVALID;		/* associates tags to request_ids */
	ObjRef objRefs[MAXREQID] = INVALID;	/* saves objRefs in case of CloseConnection */
	byte reqId;
	byte tag;	
	ObjRef objref;
	GIOPMsg msg;
	byte svrPort;
	byte rcvConnId;
	byte connId[NUMPORTS] = 0;	/* keep track of the connId for each port */

discard:
end: do
	:: uin?URequest(tag,objref) -> 
		/* Received a URequest message from the user
		 * tag      identifies the User process that made the request 
		 * objref   is the object reference containing the destination port
		 */ 

		d_step {
			svrPort = objref.port;

		/* find a free request_id by scanning the usedReqId array */
			reqId = 0;
			do
			:: (usedReqId[reqId] != FREE) -> 
				reqId = (reqId + 1);
				assert(reqId < MAXREQID) /* all reqIds INUSE */

			:: (usedReqId[reqId] == FREE) -> 	
				break;
			od;

		/* found a free request_id, mark it as INUSE */
			usedReqId[reqId] = INUSE;

			/* save the tag for when we get the Reply */
			/* save the objref in case we get a CloseConnection */
			tags[reqId] = tag;
			objRefs[reqId].objKey = objref.objKey;
			objRefs[reqId].port = objref.port;

			/* build and send the request message */
			msg.mhdr.request_id = reqId;
			msg.mhdr.object_key = objref.objKey;
		}
		/* send the request */
		toAgentL[svrPort]!Request(connId[svrPort], msg);


		/* randomly choose to cancel the sent request or just continue */
		if
		:: (1) ->
			/* do nothing */
		:: (1) ->

			/* The Message contents are the same as the request, The important 
			 * thing is the request_id needs to be the same as the request */
			toAgentL[svrPort]!CancelRequest(connId[svrPort], msg);

			usedReqId[reqId] = CANCELLED;
			
			/* send a reply to the user indicating an exception */
			uout!UReply(tag, SYSTEM_EXCEPTION);
		fi;

	:: lin?Reply(rcvConnId, svrPort, msg) -> 

		if
		:: (rcvConnId != connId[svrPort]) ->
			goto discard
		:: else ->
		fi;

		/* It is an error to receive a reply for something that is not
		 * either pending or cancelled.  */
		d_step {
		reqId = msg.mhdr.request_id;
		assert( usedReqId[reqId] != FREE );
		}

		if
		:: (usedReqId[reqId] == INUSE) -> 
			/* normal case, request exists */

			if
			:: ( msg.mhdr.reply_status == LOCATION_FORWARD ) ->

				/* re-send the request to the new forward address */
				/* save the new port in case of Close */

				d_step{
				objRefs[reqId].port = msg.mhdr.forward_port;
				svrPort = msg.mhdr.forward_port;
				}

				toAgentL[svrPort]!Request(connId[svrPort], msg);	

			:: else ->

				/* send the reply to the user */
				uout!UReply(tags[reqId], msg.mhdr.reply_status); 

				/* free the request_id */
				d_step{
				usedReqId[reqId] = FREE;
				tags[reqId] = INVALID;
				objRefs[reqId].port = INVALID;
				objRefs[reqId].objKey = INVALID;
				}

			fi;

		:: (usedReqId[reqId] == CANCELLED) -> 
			/* request was previously cancelled, so just free the request_id */
			d_step{
			usedReqId[reqId] = FREE;
			tags[reqId] = INVALID;
			objRefs[reqId].port = INVALID;
			objRefs[reqId].objKey = INVALID;
			}
		fi;

	:: lin?CloseConnection(rcvConnId, svrPort, msg) -> 
		/* If a client receives a CloseConnection message from the server, it
		 * should assume that any outstanding messages (i.e. without replies)
		 * were received after the server sent the CloseConnection message,
		 * were not processed, and may be safely resent on a new connection.
		 * (12-31)
		 */

		if
		:: (rcvConnId != connId[svrPort]) ->
			goto discard
		:: else ->
		fi;

		/* close the connection: increment the connId */
		connId[svrPort] = (connId[svrPort] + 1) % MAXCONNID;

		 /* find all outstanding requests for the given server */
		reqId = 0;
		do
		:: (reqId == MAXREQID) -> 
			break

		:: (reqId != MAXREQID) ->

			if
			:: (objRefs[reqId].port == svrPort) ->
				/* only consider outstanding requests to the given server */
				if
				:: (usedReqId[reqId] == INUSE) ->
					/* This request has not received a reply.
					 * Re-send the request on the new connection.
					 */

					/* build and send the request */
					d_step {
					msg.mhdr.request_id = reqId;
					msg.mhdr.object_key = objRefs[reqId].objKey;
					}
					toAgentL[svrPort]!Request(connId[svrPort], msg);

				:: (usedReqId[reqId] == CANCELLED) ->
					/* This request has not received a reply but
					 * the user is not expecting one. Just free it.
					 */
					d_step{
					usedReqId[reqId] = FREE;
					tags[reqId] = INVALID;
					objRefs[reqId].port = INVALID;
					objRefs[reqId].objKey = INVALID;
					}

				:: (usedReqId[reqId] == FREE) ->
					/* do nothing */

				fi;

			:: (objRefs[reqId].port != svrPort) ->
				/* do nothing */
			fi;
			reqId = reqId + 1

		od;

	od
}


/*--------------------------------------------------------------------------*/


proctype Server(byte port, objKey)
{
	byte opaqueData;
	byte newport;
	bit migrating = FALSE;
	byte numMigrations = 0;
	
	/* Each server process represents a single server object;
	 * the object_key is a unique ID for each server object
	 */

	toAgentU[port]!SRegister(objKey,port);

end: do

	:: toServer[port]?SRequest(eval(objKey),opaqueData) ->

		/* Should never receive a Request when server is migrating, but
		 * it may still happen
		 */
			/* The SRequest has arrived too late, we are already migrating.
			 * Question is, what do we do in this case?
			 */
/*		if
 *		:: (migrating == TRUE) ->
 *
 *		:: (migrating == FALSE) ->
 *		fi;
 */

		/* send the reply */
		toAgentU[port]!SReply(objKey,opaqueData)	

	/* migration.pr goes below */

	od
}

/*--------------------------------------------------------------------------*/


proctype GIOPAgent(byte port; chan uin, uout, lin, lout)
{
	byte requested[MAXREQID];		/* stores the state of each request */
	bit connState = AGENT_CLOSED;	/* connection status */
	byte numOutstandingReqs = 0;	/* number of outstanding requests */
	byte registered[NUMOBJS] = INVALID;	/* registered object keys */
	byte connId = 0;	/* keep track of the connId */

	byte reqId;
	byte objKey;
	GIOPMsg msg;
	byte svrPort;
	byte rcvConnId;

discard:
end: do
	:: uin?SRegister(objKey,svrPort) ->
		/* Publish our address (port) as the ORB to contact for this objKey */
		d_step{
		gPublished[objKey] = port;

		/* Save the server's objkey to be able to direct requests to it.
		 * The registered array holds the current port at which the object
		 * is registered since objects can migrate between agents.
		 */
		registered[objKey] = port;
		}

	:: uin?SMigrateReq(objKey,svrPort) ->
		/* The Server is informing us that it is migrating to another agent.
		 * Save the new port so that if we get a request for the object we can
		 * send a LOCATION_FORWARD reply with the new port.
		 */
		registered[objKey] = svrPort;



	:: lin?Request(rcvConnId, msg) -> 
		/* Got a request from a client: process it by sending an SRequest to
		   the appropriate server or sending a LOCATION_FORWARD reply with the
		   address of the appropriate server.
		*/

		if
		:: (rcvConnId != connId) ->
			goto discard
		:: else ->
		fi;

		d_step{
		reqId = msg.mhdr.request_id;
		objKey = msg.mhdr.object_key;
		}

		if
		:: ( registered[objKey] == port ) ->
			/* The server for the object is registered with this agent, so 
			 * send the request to the server.
			 */

			connState = AGENT_CONNECTED;

			uout!SRequest(objKey,reqId);	/* send server request */

SRequestSent:
			d_step{
			requested[reqId] = INUSE;
			numOutstandingReqs = numOutstandingReqs + 1;
			}

		:: ( registered[objKey] != port ) ->

			d_step{
			if
			:: ( registered[objKey] == INVALID ) ->
				/* No such server is registered, send back an exception */
				msg.mhdr.request_id = reqId;
				msg.mhdr.object_key = objKey;
				msg.mhdr.reply_status = OBJECT_NOT_EXIST;
			:: else ->
				/* The server has migrated, so send back a LOCATION_FORWARD 
				 * reply code with the new address of the server.
				 */
				msg.mhdr.request_id = reqId;
				msg.mhdr.object_key = objKey;
				msg.mhdr.reply_status = LOCATION_FORWARD;
				msg.mhdr.forward_port = registered[objKey];
			fi;
			}

			/* send the Reply */
			lout!Reply(connId, port, msg);	
		fi;

	:: uin?SReply(objKey,reqId) ->
		/* Received server reply */
		/* Note: Servers may reply to pending requests in any order. (12-31) */

		/* It is an error to receive a SReply for a SRequest
		 * that was not outstanding, this should never happen */
		assert(requested[reqId] != FREE);

SReplyReceived:

		if
		:: (requested[reqId] == CANCELLED) -> 
			/* the request was cancelled so just free the reqId and
			 * don't bother sending the Reply to the Client */
			d_step{
			requested[reqId] = FREE;
			numOutstandingReqs = numOutstandingReqs - 1;
			}

		:: (requested[reqId] == INUSE) ->	
			d_step{
			msg.mhdr.request_id = reqId;
			msg.mhdr.object_key = objKey;
			msg.mhdr.reply_status = NO_EXCEPTION;
			}
			/* send the Reply */
			lout!Reply(connId, port, msg);	

			d_step{
			requested[reqId] = FREE;
			numOutstandingReqs = numOutstandingReqs - 1;
			}

		fi;

		/* If this is the last outstanding request then 
		 * close the connection.
		 */
		if
		:: (numOutstandingReqs == 0) ->
			if
			:: (connState == AGENT_CONNECTED) ->

				/* send the close */
				lout!CloseConnection(connId, port, msg);
CloseConnectionSent:
				connState = AGENT_CLOSED;

				/* close the connection: increment the connId */
				connId = (connId + 1) % MAXCONNID;

			:: (connState != AGENT_CONNECTED) -> 
				/* do nothing */
			fi

		:: (numOutstandingReqs != 0) -> 
			/* do nothing */
		fi;


	:: lin?CancelRequest(rcvConnId, msg) ->

		if
		:: (rcvConnId != connId) ->
			goto discard
		:: else ->
		fi;

		d_step{
		reqId = msg.mhdr.request_id;
		if
		:: ( requested[reqId] == INUSE ) ->
			/* we already sent the request to the server, 
			 * so we mark it as cancelled and wait for the reply */
			requested[reqId] = CANCELLED

		:: ( requested[reqId] == FREE ) -> 
			/* too late, we already replied */

		:: ( requested[reqId] == CANCELLED ) ->
			/* was previously cancelled so just ignore */
		fi
		}
		
	od
}


/*--------------------------------------------------------------------------*/



/*--------------------------------------------------------------------------*/
init
{

	/* create the processes from the bottom up */
	atomic {
		run GIOPClient( toClientU, toUser, toClientL );

		run GIOPAgent(/*port*/ 1, toAgentU[1], toServer[1], toAgentL[1],
		toClientL );
		run GIOPAgent(/*port*/ 2, toAgentU[2], toServer[2], toAgentL[2],
		toClientL );

		run User( toUser, toClientU );
		run User( toUser, toClientU );

		run Server(/*port*/ 1, /*objkey*/ 0 );
		run Server(/*port*/ 2, /*objkey*/ 1 );
	}

}


/* #include "never/v3.never" */
/* #include "never/v4.never" */
/* #include "never/v4b.never" */
/* #include "never/v5.never" */
/* #include "never/v6a.never" */
/* #include "never/v6b.never" */
/* #include "never/v7.never" */
/* #include "never/v8c.never" */
/* #include "never/v9.never" */
/* #include "never/v9b.never" */
/* #include "never/v10.never" */

/*=========================================================================*/
